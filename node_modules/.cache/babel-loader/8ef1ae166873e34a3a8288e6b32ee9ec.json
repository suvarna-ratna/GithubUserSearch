{"ast":null,"code":"var _jsxFileName = \"/Users/suvarnaakkala/Documents/GitHub/GithubUserSearch/src/Git.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { GitUserProvider } from \"./gitUserContext\";\nimport GitUsers from \"./GitUsers\";\nimport './Git.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Git = () => {\n  _s();\n\n  const [search, setsearch] = React.useState('');\n  const [users, setUsers] = React.useState([]);\n  const [error, setError] = React.useState();\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const getUsers = async search => {\n    if (search !== \"\") {\n      setIsLoading(true);\n      await fetch(`https://api.github.com/search/users?q=${search}&limit=20`).then(response => response.json()).then(data => {\n        if (data.message) {\n          setError(data.message);\n        }\n\n        setUsers(data.items);\n        setIsLoading(false);\n      });\n    } else {\n      setUsers([]);\n    }\n  };\n\n  useEffect(() => {\n    getUsers(search);\n  }, [search]);\n  const githubUserContent = {\n    search,\n    error,\n    users,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(GitUserProvider, {\n    value: githubUserContent,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gitusers\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"GitHub User Searcher\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"type a user...\",\n        onChange: event => setsearch(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GitUsers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Git, \"uaFwWBhSE8zpilEvZZbXi9RdAEY=\");\n\n_c = Git;\nexport default Git;\n\nvar _c;\n\n$RefreshReg$(_c, \"Git\");","map":{"version":3,"sources":["/Users/suvarnaakkala/Documents/GitHub/GithubUserSearch/src/Git.js"],"names":["React","useEffect","GitUserProvider","GitUsers","Git","search","setsearch","useState","users","setUsers","error","setError","isLoading","setIsLoading","getUsers","fetch","then","response","json","data","message","items","githubUserContent","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACO,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBX,KAAK,CAACO,QAAN,EAA1B;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4Bb,KAAK,CAACO,QAAN,CAAe,KAAf,CAAlC;;AACA,QAAMO,QAAQ,GAAG,MAAOT,MAAP,IAAkB;AAC/B,QAAIA,MAAM,KAAK,EAAf,EAAmB;AACfQ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAME,KAAK,CAAE,yCAAwCV,MAAO,WAAjD,CAAL,CACDW,IADC,CACKC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADlB,EAEDF,IAFC,CAEKG,IAAD,IAAU;AACZ,YAAIA,IAAI,CAACC,OAAT,EAAkB;AACdT,UAAAA,QAAQ,CAACQ,IAAI,CAACC,OAAN,CAAR;AACH;;AACDX,QAAAA,QAAQ,CAACU,IAAI,CAACE,KAAN,CAAR;AACAR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OARC,CAAN;AASH,KAXD,MAWO;AACHJ,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GAfD;;AAiBAR,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACT,MAAD,CAAR;AACH,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIA,QAAMiB,iBAAiB,GAAG;AAAEjB,IAAAA,MAAF;AAAUK,IAAAA,KAAV;AAAiBF,IAAAA,KAAjB;AAAwBI,IAAAA;AAAxB,GAA1B;AACA,sBACI,QAAC,eAAD;AAAiB,IAAA,KAAK,EAAEU,iBAAxB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,gBAA/B;AAAgD,QAAA,QAAQ,EAAGC,KAAD,IAAWjB,SAAS,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CApCD;;GAAMrB,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { GitUserProvider } from \"./gitUserContext\";\nimport GitUsers from \"./GitUsers\";\nimport './Git.css';\n\nconst Git = () => {\n\n    const [search, setsearch] = React.useState('');\n    const [users, setUsers] = React.useState([]);\n    const [error, setError] = React.useState();\n    const [isLoading, setIsLoading] = React.useState(false);\n    const getUsers = async (search) => {\n        if (search !== \"\") {\n            setIsLoading(true);\n            await fetch(`https://api.github.com/search/users?q=${search}&limit=20`)\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.message) {\n                        setError(data.message);\n                    }\n                    setUsers(data.items)\n                    setIsLoading(false);\n                })\n        } else {\n            setUsers([]);\n        }\n    }\n\n    useEffect(() => {\n        getUsers(search);\n    }, [search]);\n\n    const githubUserContent = { search, error, users, isLoading }\n    return (\n        <GitUserProvider value={githubUserContent}>\n            <div className='gitusers'>\n            <h1>GitHub User Searcher</h1>\n            <input type='text' placeholder=\"type a user...\" onChange={(event) => setsearch(event.target.value)}></input>\n            </div>\n        <GitUsers />\n        </GitUserProvider>);\n}\nexport default Git;"]},"metadata":{},"sourceType":"module"}