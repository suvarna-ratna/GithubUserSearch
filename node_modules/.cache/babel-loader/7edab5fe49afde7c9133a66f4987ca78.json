{"ast":null,"code":"var _jsxFileName = \"/Users/suvarnaakkala/Documents/GitHub/hyf-homework/react/week4/github-user-searcher/src/UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\nconst UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [repos, setRepos] = useState([]);\n\n  const fetchUsers = async url => {\n    try {\n      const fetchUsers = await fetch(url);\n      const usersData = await fetchUsers.json(); // console.log(usersData)\n\n      if (usersData.items) {\n        setIsLoading(false);\n        return setUsers(usersData.items);\n      } else if (usersData.message) {\n        console.log(error);\n        setIsLoading(false);\n        setError(usersData.message);\n      }\n    } catch (error) {\n      // console.log(error.Error)\n      setIsLoading(false);\n      setError(error);\n    }\n  };\n\n  const UserValues = {\n    users,\n    userSearch,\n    isLoading,\n    error,\n    getUsers: url => {\n      if (userSearch) {\n        // console.log(userSearch)\n        setIsLoading(true);\n        return fetchUsers(url);\n      }\n    },\n    onChange: e => {\n      setUserSearch(e.target.value);\n    },\n    getRepos: async url => {\n      const fetchRepos = await fetch(url);\n      const reposData = await fetchRepos.json();\n      return setRepos(reposData);\n    },\n    repos\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: UserValues,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"xUiMkHTJwtxpwpXxNjpSFGUFsuY=\");\n\n_c = UserProvider;\nexport default UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/suvarnaakkala/Documents/GitHub/hyf-homework/react/week4/github-user-searcher/src/UserContext.js"],"names":["React","useState","createContext","UserContext","UserProvider","children","isLoading","setIsLoading","users","setUsers","userSearch","setUserSearch","error","setError","repos","setRepos","fetchUsers","url","fetch","usersData","json","items","message","console","log","UserValues","getUsers","onChange","e","target","value","getRepos","fetchRepos","reposData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;;AACA,OAAO,MAAMC,WAAW,gBAAGD,aAAa,EAAjC;;AAEN,MAAME,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMe,UAAU,GAAG,MAAOC,GAAP,IAAe;AAC9B,QAAI;AACA,YAAMD,UAAU,GAAG,MAAME,KAAK,CAACD,GAAD,CAA9B;AACA,YAAME,SAAS,GAAG,MAAMH,UAAU,CAACI,IAAX,EAAxB,CAFA,CAGA;;AACA,UAAID,SAAS,CAACE,KAAd,EAAqB;AACjBd,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,eAAOE,QAAQ,CAACU,SAAS,CAACE,KAAX,CAAf;AACH,OAHD,MAGO,IAAIF,SAAS,CAACG,OAAd,EAAuB;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAL,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,QAAAA,QAAQ,CAACM,SAAS,CAACG,OAAX,CAAR;AACH;AACJ,KAZD,CAYE,OAAOV,KAAP,EAAc;AACZ;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,MAAAA,QAAQ,CAACD,KAAD,CAAR;AAEH;AACJ,GAnBD;;AAqBA,QAAMa,UAAU,GAAG;AACfjB,IAAAA,KADe;AAEfE,IAAAA,UAFe;AAGfJ,IAAAA,SAHe;AAIfM,IAAAA,KAJe;AAKfc,IAAAA,QAAQ,EAAGT,GAAD,IAAS;AACf,UAAIP,UAAJ,EAAgB;AACZ;AACAH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,eAAOS,UAAU,CAACC,GAAD,CAAjB;AACH;AACJ,KAXc;AAYfU,IAAAA,QAAQ,EAAGC,CAAD,IAAO;AACbjB,MAAAA,aAAa,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACH,KAdc;AAefC,IAAAA,QAAQ,EAAE,MAAOd,GAAP,IAAe;AACrB,YAAMe,UAAU,GAAG,MAAMd,KAAK,CAACD,GAAD,CAA9B;AACA,YAAMgB,SAAS,GAAG,MAAMD,UAAU,CAACZ,IAAX,EAAxB;AACA,aAAOL,QAAQ,CAACkB,SAAD,CAAf;AACH,KAnBc;AAoBfnB,IAAAA;AApBe,GAAnB;AAuBA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEW,UAA7B;AAAA,cACKpB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAzDA;;GAAMD,Y;;KAAAA,Y;AA0DP,eAAeA,YAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\nexport const UserContext = createContext();\n\n const UserProvider = ({ children }) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [users, setUsers] = useState([]);\n    const [userSearch, setUserSearch] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [repos, setRepos] = useState([]);\n\n    const fetchUsers = async (url) => {\n        try {\n            const fetchUsers = await fetch(url)\n            const usersData = await fetchUsers.json();\n            // console.log(usersData)\n            if (usersData.items) {\n                setIsLoading(false)\n                return setUsers(usersData.items)\n            } else if (usersData.message) {\n                console.log(error)\n                setIsLoading(false)\n                setError(usersData.message);\n            }\n        } catch (error) {\n            // console.log(error.Error)\n            setIsLoading(false)\n            setError(error);\n\n        }\n    }\n\n    const UserValues = {\n        users,\n        userSearch,\n        isLoading,\n        error,\n        getUsers: (url) => {\n            if (userSearch) {\n                // console.log(userSearch)\n                setIsLoading(true);\n                return fetchUsers(url);\n            }\n        },\n        onChange: (e) => {\n            setUserSearch(e.target.value)\n        },\n        getRepos: async (url) => {\n            const fetchRepos = await fetch(url);\n            const reposData = await fetchRepos.json();\n            return setRepos(reposData);\n        },\n        repos,\n    }\n\n    return (\n        <UserContext.Provider value={UserValues}>\n            {children}\n        </UserContext.Provider>\n    )\n\n}\nexport default UserProvider"]},"metadata":{},"sourceType":"module"}